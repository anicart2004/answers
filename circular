#include<stdio.h>
#include<stdlib.h>
typedef struct QueueType{
int Data;
struct QueueType *NEXT;
} QUEUENODE;
QUEUENODE *FRONT, *REAR;
void InitQueue();
void EnQueue(int NUM);
void PrintQueue();
void DeQueue();
int main()
{
int NUM, choice,i,N;
InitQueue();
while (1) {
printf("\nMenu:\n");
printf("1. Insert into QUEUE (ENQUEUE)\n");
printf("2. Display the contents of the QUEUE\n");
printf("3. Remove from QUEUE (DEQUEUE)\n");
printf("4. Exit\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the number of elements:");
scanf("%d",&N);
printf("Enter %d elements:",N);
InitQueue();
for(i=1;i<=N;i++){
scanf("%d",&NUM);
EnQueue(NUM);
}
break;
case 2:
PrintQueue();
break;
case 3:
DeQueue();
break;
case 4:
exit(0);
default:
printf("Invalid choice!\n");
}
}
return 0;
}
void InitQueue()
{
FRONT = REAR = NULL;
}
void EnQueue(int NUM)
{
QUEUENODE *NODE;
NODE = (QUEUENODE*)malloc(sizeof(QUEUENODE));
NODE->Data= NUM;
NODE->NEXT= NULL;
if (FRONT == NULL) {
FRONT = REAR = NODE;
REAR->NEXT = FRONT;
} else {
REAR->NEXT = NODE;
REAR = NODE;
REAR->NEXT = FRONT;
}
}
void PrintQueue()
{
if (FRONT == NULL) {
printf("Queue is empty\n");
return;
}
QUEUENODE *CURR = FRONT;
do {
printf("%d\t", CURR->Data);
CURR = CURR->NEXT;
} while (CURR != FRONT);
printf("\n");
}
void DeQueue()
{
if (FRONT == NULL) {
printf("Queue is empty\n");
return;
}
QUEUENODE *CURR = FRONT;
if (FRONT == REAR) {
FRONT = REAR = NULL;
} else {
FRONT = FRONT->NEXT;
REAR->NEXT = FRONT;
}
printf("Dequeued element: %d\n", CURR->Data);
free(CURR);
}
