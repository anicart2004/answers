#include <stdio.h>
#include <stdlib.h>
typedef struct ListNode {
int data;
struct ListNode *next;
} LISTNODE;
LISTNODE *Head = NULL;
// Function Prototypes
void InsertOrdered(int num);
void DisplayList();
void DeleteNode(int num);
void ReverseList();
int main() {
int choice, num;
while (1) {
printf("\n--- ORDERED LINKED LIST MENU ---\n");
printf("1. Input a number\n");
printf("2. Display the linked list\n");
printf("3. Delete a given number\n");
printf("4. Reverse the linked list\n");
printf("5. EXIT\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch(choice) {
case 1:
printf("Enter number to insert: ");
scanf("%d", &num);
InsertOrdered(num);
break;
case 2:
DisplayList();
break;
case 3:
printf("Enter number to delete: ");
scanf("%d", &num);
DeleteNode(num);
break;
case 4:
ReverseList();
printf("Linked list reversed.\n");
break;
case 5:
printf("Exiting...\n");
exit(0);
default:
printf("Invalid choice! Try again.\n");
}
}
return 0;
}
// Insert a node in ascending order
void InsertOrdered(int num) {
LISTNODE newNode = (LISTNODE)malloc(sizeof(LISTNODE));
newNode->data = num;
newNode->next = NULL;
if (Head == NULL || num < Head->data) {
newNode->next = Head;
Head = newNode;
return;
}
LISTNODE *curr = Head;
while (curr->next != NULL && curr->next->data < num) {
curr = curr->next;
}
newNode->next = curr->next;
curr->next = newNode;
}
// Display the linked list
void DisplayList() {
if (Head == NULL) {
printf("Linked list is empty.\n");
return;
}
LISTNODE *temp = Head;
while (temp != NULL) {
printf("%d -> ", temp->data);
temp = temp->next;
}
printf("NULL\n");
}
// Delete a given number
void DeleteNode(int num) {
if (Head == NULL) {
printf("List is empty.\n");
return;
}
if (Head->data == num) {
LISTNODE *temp = Head;
Head = Head->next;
free(temp);
printf("%d deleted from the list.\n", num);
return;
}
LISTNODE *curr = Head;
while (curr->next != NULL && curr->next->data != num) {
curr = curr->next;
}
if (curr->next == NULL) {
printf("%d not found in the list.\n", num);
return;
}
LISTNODE *delNode = curr->next;
curr->next = delNode->next;
free(delNode);
printf("%d deleted from the list.\n", num);
}
// Reverse the linked list
void ReverseList() {
LISTNODE *prev = NULL, *curr = Head, *next = NULL;
while (curr != NULL) {
next = curr->next;
curr->next = prev;
prev = curr;
curr = next;
}
Head = prev;
}
